#BlueJ class context
comment0.target=SuperString
comment0.text=\n\ A\ String\ with\ some\ special\ tricks\ to\ let\ us\ practice.\n\ Wants\ to\ have\ the\ "line\ i",\ "word\ j",\ and\ "char\ k"\ methods\ of\ LiveCode.\n\ Alternative\ approach\ to\ consider\:\ make\ a\ string\ manipulator\ that\ receives\ Strings.\n\n\ @author\ Mike\ Roam\n\ @version\ 2022f.Jun03\n
comment1.params=
comment1.target=SuperString()
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ SuperString.\n\ This\ constructor\ without\ arguments\ uses\ a\ placeholder\ "empty\ text"\n
comment10.params=i
comment10.target=java.lang.String\ getChord(int)
comment10.text=\n\ find\ chord\ i,\ starting\ count\ at\ ONE\ so\ watch\ &\ test\ for\ OBOBs.\n
comment11.params=i
comment11.target=int\ indexOfChord(int)
comment11.text=\n\ Would\ we\ want\ to\ number\ the\ chords?\ \n\ If\ so,\ this\ could\ (when\ written)\ find\ the\ char\ offset\ into\ the\ string\ of\ chord\ number\ I\n\ Or\ not\ bother,\ instead\ while\ processing\ just\ keep\ pulling\ off\ first\ lyrics\ &\ first\ chord?\n\ If\ we\ cached\ all\ chords\ AND\ their\ locations\ we\ could\ later\ get\ their\ locations\ again,\n\ but\ does\ anybody\ need\ that?\n
comment12.params=
comment12.target=java.lang.String\ getFirstLyric()
comment12.text=\n\ Should\ be\ ""\ if\ current\ info\ is\ starting\ with\ a\ chord?\n\ Could\ alternatively\ be\ a\ static\ method\ which\ both\ receives\ and\ returns\ Strings.\ (Receive\ SuperString??)\n
comment13.params=
comment13.target=java.lang.String\ chopFirstLyric()
comment13.text=\n\ Handy\ song\ manipulation,\ does\ NOT\ mess\ with\ this.myText(\ )\n\ Could\ alternatively\ be\ a\ static\ method\ which\ both\ receives\ and\ returns\ Strings.\ (Receive\ SuperString??)\n
comment14.params=
comment14.target=java.lang.String\ getFirstChord()
comment14.text=\n\ Should\ be\ ""\ if\ current\ info\ is\ starting\ with\ a\ lyric?\n\ Might\ return\ "{F\ G\ Em\ Am}\ \ or\ {F}\n\ Could\ alternatively\ be\ a\ static\ method\ which\ both\ receives\ and\ returns\ Strings.\ (Receive\ SuperString??)\n
comment15.params=
comment15.target=java.lang.String\ chopFirstChord()
comment15.text=\n\ Handy\ song\ manipulation,\ does\ NOT\ mess\ with\ this.myText(\ )\n\ Could\ alternatively\ be\ a\ static\ method\ which\ both\ receives\ and\ returns\ Strings.\ (Receive\ SuperString??)\n
comment16.params=wantedLineNum
comment16.target=java.lang.String\ getLine(int)
comment16.text=\n\ Returns\ one\ of\ the\ lines\ of\ myText.\n\ Let's\ stay\ alert\ to\ counting\ from\ zero\ (by\ Java)\ or\ from\ one\ (me).\n\ e.g.\ "lineOne\\nlineTwo\\nlineThree".getLine(2)\ will\ return\ "lineTwo"\n
comment17.params=
comment17.target=void\ splitIntoLines()
comment17.text=\n\ having\ trouble\ with\ \\n\ \ so\ using\ \ '/n'\ for\ now?\n\ (typing\ "lineone\\nlinetwo"\ into\ blueJ\ runtime\ for\ getText()\ gets\n\ "illegal\ escape\ character"\ message).\ Hmmm,\ does\ "lineone\\\\nlinetwo"\ work??\n\n\ See\n
comment18.params=
comment18.target=java.lang.String\ toString()
comment18.text=\n\ \n
comment2.params=newText
comment2.target=SuperString(java.lang.String)
comment2.text=\n\ Constructor\ for\ objects\ of\ class\ SuperString\n
comment3.params=newText
comment3.target=void\ setText(java.lang.String)
comment3.text=\n\ setter\n
comment4.params=
comment4.target=java.lang.String\ getText()
comment4.text=\n\ getter\n
comment5.params=
comment5.target=void\ askUserForText()
comment5.text=\n\ Using\ Swing\ JOptionPane\ dialog\ box\n\ (have\ to\ import\ javax.swing.*;\ )\n\ <p>\n\ See\ JavaFX\ example\ below\n
comment6.params=
comment6.target=void\ askJavaFXUserForText()
comment6.text=\n\ based\ upon\ code\ in\n\ \ \ \ <a\ href\="https\://examples.javacodegeeks.com/desktop-java/javafx/dialog-javafx/javafx-dialog-example/">...</a>\n\ \ \ \ and\n\ \ \ \ <a\ href\="https\://www.geeksforgeeks.org/javafx-textinputdialog/">...</a>\n\ \ \ \ and\ reference\n\ \ \ \ <a\ href\="https\://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/TextInputDialog.html">...</a>\n\n\ \ \ \ had\ to\n\ \ \ \ import\ javafx.scene.control.*\n
comment7.params=fileName
comment7.target=void\ readTextFromFile(java.lang.String)
comment7.text=\n\ reading\ from\ text\ file\n\ from\n\ https\://stackoverflow.com/questions/37769481/javafx-gui-that-opens-a-text-file-how-to-read-whats-in-text-file-and-edit-save\n\n\ has\ to\ \ \ \ import\ java.io.*\ \ \ \ \ and\ java.util.ArrayList\n
comment8.params=y
comment8.target=java.lang.String\ getWord(int)
comment8.text=\n\ returns\ the\ (y+1)th\ word\ of\ our\ text.\ \n\ "word"\ is\ anything\ between\ spaces\ (and\ linebreaks\!)\ \n\ Doesn't\ notice\ punctuation\ (e.g.\ "about\ dog-food"\ is\ two\ words.\n\ Eg\ "hi\ there".word(0)\ returns\ "hi"\n\ \n\ How\ to\ do?\ Hint\:\ check\ getLine(\ )\ and\ splitIntoLines(\ )\n
comment9.params=i
comment9.target=java.lang.String\ getChar(int)
comment9.text=\n\ returns\ the\ (y+1)th\ char\ of\ our\ text.\ \ Watch\ and\ test\ for\ OBOBs\!\n\ "char"\ is\ any\ character.\ Hmmm,\ what\ about\ unicode?\n\ Eg\ "hi\ there".char(1)\ returns\ "h"\n\ Note\:\ I'm\ using\ String\ rather\ than\ char\ or\ Character,\ so\ I\ can\ use\ my\ \n\ \ \ \ fake\ wrongslash\ /n\ linebreaks\!\n\ Hint\:\ See\ String\ in\ API\:\n\ <a\ href\="https\://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html"\n\ \ \ \ https\://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html</a>\n\ Hint\:\ check\ String.charAt(int\ i)\ \ \ \ which\ also\ work\ for\ unicode,\ see\ CodePointAt\ for\ details\n
numComments=19
